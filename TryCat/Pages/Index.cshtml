@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div x-data="game"
     @@keyup.window="onKeyPress($event.key)">
    <div>
        <template x-for="row in board">
            <div class="row">
                <template x-for="tile in row">
                    <div class="tile" :class="tile.status" x-text="tile.letter"></div>
                </template>
            </div>
        </template>
    </div>
    <output x-text="message"></output>
</div>
<script>
    class Tile{
        letter ='';
        status ='';//correct, present, absent
    };
    document.addEventListener('alpine:init', () => {
        Alpine.data('game', () => {
            return {
                board:{},

                theWord: 'dog',

                guessesAllowed: 3,
                currentRowIndex: 0,
                gameState: 'active', //  active, complete
                message: '', // game progress feedback message to user

                get currentGuess(){
                    return this.currentRow.map(tile=>tile.letter).join('');//just like split().join() to concat array into a string...
                },

                init(){
                    this.board= Array.from({length: this.guessesAllowed }, () =>{
                        return  Array.from({length: this.theWord.length }, () => new Tile);
                    });
                },
                fillTile(key){
                    for(let tile of this.currentRow){
                        if(tile.letter==''){
                            tile.letter=key;
                            break;
                        }
                    }


                    },
                onKeyPress(key){
                    this.message=''; //clear any previous message we had displayed
                    if(/^[A-z]$/.test(key)){
                        this.fillTile(key);
                    }
                    else if (key=='Enter'){
                        this.submitGuess();
                    };
                },
                get currentRow(){
                    return this.board[this.currentRowIndex];// this one is BS IMO... unless it is a getter ?
                },
                submitGuess(){
                    if(this.currentGuess.length<this.theWord.length){
                        return; //reject early
                    }
                   this.refreshStatusForCurrentRow();
                    if(this.currentGuess==this.theWord){
                        this.message='winner!';
                    } else if(this.guessesAllowed==this.currentRowIndex+1){
                         this.message='game over man.';
                        this.gameState='complete';

                    } else{
                        this.message+=" try again please";
                        this.currentRowIndex++;// entered a word that didn't match so lost another row.
                    }
                },
                refreshStatusForCurrentRow(){
                      //update the tile colors based on correctness.
                    this.currentRow.forEach((tile, index) => {
                        tile.status=this.theWord.includes(tile.letter)?'present':'absent';
                        if(this.currentGuess[index]==this.theWord[index]){
                            tile.status='correct';
                        }
                    });
                }
            }
        }
        );
    });
</script>